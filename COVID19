# importing libraries

from __future__ import print_function
from ipywidgets import interact, interactive, fixed, interact_manual
from IPython.core.display import display, HTML

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import folium #for World Map
import plotly.graph_objects as go
import seaborn as sns
import ipywidgets as widgets

# loading data right from the source:
death_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv')
confirmed_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')
recovered_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv')
country_df = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv')

# data cleaning

# renaming the df column names to lowercase
country_df.columns = map(str.lower, country_df.columns)
confirmed_df.columns = map(str.lower, confirmed_df.columns)
death_df.columns = map(str.lower, death_df.columns)
recovered_df.columns = map(str.lower, recovered_df.columns)

# changing province/state to state and country/region to country
confirmed_df = confirmed_df.rename(columns={'province/state': 'state', 'country/region': 'country'})
recovered_df = confirmed_df.rename(columns={'province/state': 'state', 'country/region': 'country'})
death_df = death_df.rename(columns={'province/state': 'state', 'country/region': 'country'})
country_df = country_df.rename(columns={'country_region': 'country'})
# country_df.head()

# total number of confirmed, death and recovered cases
confirmed_total = int(country_df['confirmed'].sum())
deaths_total = int(country_df['deaths'].sum())
recovered_total = int(country_df['recovered'].sum())
active_total = int(country_df['active'].sum())

sorted_country_df = country_df.sort_values('confirmed', ascending=False)

def highlight_col(x):
    r = 'background-color: red'
    y = 'background-color: purple'
    g = 'background-color: grey'
    df1 = pd.DataFrame('', index=x.index, columns=x.columns)
    df1.iloc[:, 4] = y
    df1.iloc[:, 5] = r
    df1.iloc[:, 6] = g
    return df1

def show_latest_cases(n):
    n= int(n)
    return country_df.sort_values('confirmed', ascending=False).head(n).style.apply(highlight_col, axis=None)

sorted_country_df.head(5).style.apply(highlight_col,axis=None)

44import plotly.express as px

# Slide to see top 20 Worst hit Countries

fig = px.scatter(sorted_country_df.head(10), x='country', y='confirmed', size='confirmed', 
                color='country', hover_name='country', size_max=60)
#fig.show()

# # plotting the 20 worst hit countries

def bubble_chart(n):
    fig = px.scatter(sorted_country_df.head(n), x="country", y="confirmed", size="confirmed", color="country",
               hover_name="country", size_max=60)
    fig.update_layout(
    title=str(n) +" Worst hit countries",
    xaxis_title="Countries",
    yaxis_title="Confirmed Cases",
    width = 700
    )
    fig.show();

interact(bubble_chart, n=10)

ipywLayout = widgets.Layout(border='solid 2px green')
ipywLayout.display='none'
widgets.VBox([fig], layout=ipywLayout)

# Global Spread of COVID19

import plotly.graph_objects as go

def plot_cases_for_country(country):
    labels = ['confirmed', 'deaths']
    colors = ['blue', 'red']
    mode_size = [6,8]
    line_sizes = [4, 5]

    df_list = [confirmed_df, death_df]

    fig = go.Figure()
    
    for i, df in enumerate(df_list):
        if country == 'World' or country =='world':
            x_data = np.array(list(df.iloc[:, 5:].columns))
            y_data = np.sum(np.asarray(df.iloc[:,4:]),axis = 0)
        else:
            x_data = np.array(list(df.iloc[:, 5:].columns))
            y_data = np.sum(np.asarray(df[df['country'] == country].iloc[:,20:]),axis = 0)
        
        fig.add_trace(go.Scatter(x=x_data, y=y_data, mode='lines+markers',
                            name=labels[i],
                            line=dict(color=colors[i], width=line_sizes[i]),
                            connectgaps=True,
                            text = "Total " + str(labels[i]) +": "+ str(y_data[-1])
                            ));
        
    fig.show()
    
#plot_cases_for_country('US')

interact(plot_cases_for_country, country='World') #To Display Text box for searching based on world

# Global Spread of COVID19

import folium

world_map =  folium.Map(location=[11,0], tiles= "cartodbpositron", zoom_start=2, max_zoom = 6, min_zoom = 2)

for i in range(0, len(confirmed_df)):
    folium.Circle(
    radius=(int((np.log(confirmed_df.iloc[i,-1]+1.00001)))+0.2)*50000,
    location=[confirmed_df.iloc[i]['lat'], confirmed_df.iloc[i]['long']],
    popup='The Waterfront',
    color='crimson',
    fill=True,
    fill_color = 'blue',
    tooltip = "<div style='margin: 0; background-color: black; color: white;'>"+
                    "<h4 style='text-align:center;font-weight: bold'>"+confirmed_df.iloc[i]['country'] + "</h4>"
                    "<hr style='margin:10px;color: white;'>"+
                    "<ul style='color: white;;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>"+
                        "<li>Confirmed: "+str(confirmed_df.iloc[i,-1])+"</li>"+
                        "<li>Deaths:   "+str(death_df.iloc[i,-1])+"</li>"+
                        "<li>Death Rate: "+ str(np.round(death_df.iloc[i,-1]/(confirmed_df.iloc[i,-1]+1.00001)*100,2))+ "</li>"+
                    "</ul></div>",
    ).add_to(world_map)

world_map

Notebook covers:
What is COVID-19?
Data loading from John Hopkins CSSE data repository
Data Cleaning and Preparation
Visualising N number of worst hit countries using plotly scatter plot.
Plotting confirmed and death cases for the requested country.
Plotting all cases on world map using Folium
